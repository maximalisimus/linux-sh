С помощью переменной VPATH можно задать список каталогов, где шаблонные правила будут искать зависимости. В следующем примере:
    VPATH := Editor TextLine

$@ — имя цели
$< — имя первой зависимости
$? — имена всех зависимостей, которые новее чем цель
$^ — имена всех зависимостей цели

addprefix, addsuffix, wildcard, notdir и patsubst

Функция addprefix рассматривает второй параметр как список слов разделенных пробелами. В начало каждого слова она добавляет строку, переданную ей в качестве первого параметра. Например, в результате выполнения make-файла:

    src_dirs := Editor TextLine
    src_dirs := $(addprefix ../../, $(src_dirs))

    all:
        @echo $(src_dirs)
на экран будет выведено
    ../../Editor ../../TextLine 


Функция addsuffix работает аналогично функции addprefix, только добавляет указанную строку в конец каждого слова. Например, в результате выполнения make-файла:

    source_dirs := Editor  TextLine
    search_wildcards := $(addsuffix /*.cpp, $(source_dirs))

    all:
        @echo $(search_wildcards)
на экран будет выведено

    Editor/*.cpp  TextLine/*.cpp 


Функция wildcard "расширяет" переданный ей шаблон или несколько шаблонов в список файлов, удовлетворяющих этим шаблонам. Пусть в директории Editor находится файл Editor.cpp, а в директории TextLine - файл TextLine.cpp:

wildcard_example /
Editor /
Editor.cpp
TextLine /
TextLine.cpp
makefile
Тогда в результате выполнения такого make-файла:
    search_wildcards := Editor/*.cpp  TextLine/*.cpp
    source_files := $(wildcard $(search_wildcards))

    all:
        @echo $(source_files)
на экран будет выведено

    Editor/Editor.cpp  TextLine/TextLine.cpp 


Функция notdir позволяет "убрать" из имени файла имя директории, где он находится. Например, в результате выполнения make-файла:

    source_files := Editor/Editor.cpp  TextLine/TextLine.cpp
    source_files := $(notdir $(source_files))

    all:
        @echo $(source_files)
на экран будет выведено

    Editor.cpp TextLine.cpp 


Функция patsubst позволяет изменить указанным образом слова, подходящие под шаблон. Она принимает три параметра - шаблон, новый вариант слова и исходную строку. Исходная строка рассматривается как список слов, разделенных пробелом. Каждое слово, подходящее под указанный шаблон, заменяется новым вариантом слова. В шаблоне может использоваться специальный символ '%', который означает "любое количество произвольных символов". Если символ '%' встречается в новом варианте слова (втором параметре), то он заменяется текстом, соответствующим символу '%' в шаблоне. Например, в результате выполнения make-файла:

    source_files := Editor.cpp  TextLine.cpp 
    object_files := $(patsubst %.cpp, %.o, $(source_files))

    all:
        @echo $(object_files) 
на экран будет выведено

    Editor.o  TextLine.o 

Видно, что во всех словах окончание ".cpp" заменено на ".o". Функция patsubst имеет второй, более короткий вариант записи для тех случаев, когда надо изменить суффикс слова (например, заменить расширение в имени файла). Более короткий вариант выглядит так:

    $(имя_переменной:.старый_суффикс=.новый_суффикс) 
Применяя "короткий" вариант записи предыдущий пример можно записать так:
    source_files := Editor.cpp  TextLine.cpp 
    object_files := $(source_files:.cpp=.o)

    all:
        @echo $(object_files)


Циклы в Makefile

qwert:
    for number in 1 2 3 4 ; do \
        echo $$number ; \
    done
дает:

1
2
3
4

Для больших диапазонов используйте:

qwert:
    number=1 ; while [[ $$number -le 10 ]] ; do \
        echo $$number ; \
        ((number = number + 1)) ; \
    done
Это выводит от 1 до 10 включительно, просто измените условие завершения while с 10 до 1000 для гораздо большего диапазона, как указано в вашем комментарии.

Вложенные петли могут быть выполнены таким образом:

qwert:
    num1=1 ; while [[ $$num1 -le 4 ]] ; do \
        num2=1 ; while [[ $$num2 -le 3 ]] ; do \
            echo $$num1 $$num2 ; \
            ((num2 = num2 + 1)) ; \
        done ; \
        ((num1 = num1 + 1)) ; \
    done
производства:

1 1
1 2
1 3
2 1
2 2
2 3
3 1
3 2
3 3
4 1
4 2
4 3




