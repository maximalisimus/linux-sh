
arch_chroot "" 2>/tmp/.errlog

pacstrap ${MOUNTPOINT}  2>/tmp/.errlog


	if [[ $COMMON_INSTALLED -eq 0 ]]; then
       dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title "$_InstComTitle" --yesno "$_InstComBody" 0 0
       
       if [[ $? -eq 0 ]]; then
          clear
          pacstrap ${MOUNTPOINT} gnome-keyring debian-archive-keyring archlinux-keyring gparted grub-customizer dconf dconf-editor cmake python2-xdg xdg-user-dirs xdg-utils rp-pppoe gamin ntfs-3g polkit gvfs gvfs-afc gvfs-smb xterm lxterminal gnome-terminal leafpad gedit geany bash-completion parcellite curl git wget gwget acetoneiso2 fuseiso 2>/tmp/.errlog
		  # debootstrap
          check_for_error
       fi
       
    fi
    
    # Either way, the option will no longer be presented.
    COMMON_INSTALLED=1


pacstrap ${MOUNTPOINT} ark xarchiver unzip zip unrar p7zip 2>/tmp/.errlog
pacstrap ${MOUNTPOINT} gnome-icon-theme ttf-liberation ttf-dejavu opendesktop-fonts ttf-bitstream-vera ttf-arphic-ukai ttf-arphic-uming ttf-hanazono terminus-font breeze breeze-grub breeze-icons 2>/tmp/.errlog
pacstrap ${MOUNTPOINT} brasero blender inkscape chromium transmission-gtk gimp gimp-help-ru okular vlc libreoffice-fresh libreoffice-fresh-ru 2>/tmp/.errlog
pacstrap ${MOUNTPOINT} keepassx truecrypt virtualbox kicad kicad-library kicad-library-3d smplayer wine-mono wine_gecko winetricks 2>/tmp/.errlog




myfunction() {
	
   dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title "$_Menu_Title" \
    --menu "$_Menu_Body" 0 0 2 \
 	"1" "$_Menu_Name_1" \
	"2" "$_Menu_Name_2" 2>${ANSWER}	

    case $(cat ${ANSWER}) in
        "1") # arch_chroot ""  2>/tmp/.errlog
             ;;
        "2") 
             ;;
          *) # Back to NAME Menu
             ;;
     esac	
     
     check_for_error
}

# Big Menu in variables parameter

	variables=""	
	for i in $(cat /FileDir/My_File); do
		variables="${variables} ${i} -"
	done
	
	dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title "$_LocateTitle" --menu "$_localeBody" 0 0 16 ${variables} 2>${ANSWER} || config_base_menu 
	variables=$(cat ${ANSWER})
	
	dirs=""	
ls / > ./example.conf
 for i in $(cat ./example.conf); do
      dirs="${dirs} ${i} - off"
  done
myfunction() {
	
   dialog --backtitle "VERSION - SYSTEM (ARCHI)" --title "_Menu_Title" \
    --menu "_Menu_Body" 0 0 3 \
 	"1" "_Menu_Name_1" \
	"2" "_Menu_Name_2" \
	"3" "Done"	2>${ANSWER}	
	variable=($(cat ${ANSWER}))
    case $variable in
        "1") dialog --backtitle "VERSION - SYSTEM (ARCHI)" --title "_LocateTitle" --checklist "_localeBody" 0 0 16 ${dirs} 2>${ANSWER} || myfunction
			LOCALE=$(cat ${ANSWER})
			sleep 1
			clear
			sleep 1
			echo "${LOCALE}"
			sleep 3
             ;;
        "2") # Menu 2
			sleep 1
			clear
			echo "Menu 2"
			sleep 1
             ;;
        "3") unset myls
			unset count
			rm -rf ${ANSWER}
			clear
			exit 0
             ;;
     esac	
     
     myfunction
}
	
# MSGBOX

dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title "$_MSG_Title" --msgbox "$_MSG_Body" 0 0

# INFOBOX

dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title "$_InfoBox_Title" --infobox "$_InfoBox_Body\n$(cat ${BTRFS_OPTS})" 0 0
sleep 2


# YESNO

dialog --defaultno --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title "$_YESNO_Title" --yesno "$_YESNO_Body" 0 0

if [[ $? -eq 0 ]]; then
else
fi



# TEXTBOX

lsblk -o NAME,MODEL,TYPE,FSTYPE,SIZE,MOUNTPOINT | grep -v "loop" | grep -v "rom" | grep -v "arch_airootfs" > /tmp/.devlist
dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title "$_DevShowTitle" --textbox /tmp/.devlist 0 0


# INPUTBOX
dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title "$_NUsrTitle" --inputbox "$_NUsrBody" 0 0 "" 2>${ANSWER}
USER=$(cat ${ANSWER})


my_menu() {

	if [[ $SUB_MENU != "config_user_menu" ]]; then
	   SUB_MENU="config_user_menu"
	   HIGHLIGHT_SUB=1
	else
	   if [[ $HIGHLIGHT_SUB != 3 ]]; then
	      HIGHLIGHT_SUB=$(( HIGHLIGHT_SUB + 1 ))
	   fi
	fi

    dialog --default-item ${HIGHLIGHT_SUB} --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title "$_MyMenu_Title" --menu "$_My_Menu_Body" 0 0 3 \
 	"1" "$_Menu_Name_1" \
	"2" "$_Menu_Name_2" \
	"3" "$_Back" 2>${ANSWER}
	
	HIGHLIGHT_SUB=$(cat ${ANSWER})
    case $(cat ${ANSWER}) in
    "1") 
         ;;
    "2") 
         ;;     
      *) # Back to NAME Menu
         ;;
    esac
    
    my_menu
}



_user_local

clear
info_search_pkg
_list_screen_startup=$(check_s_lst_pkg "${_screen_startup[*]}")
wait
clear

clear
info_search_pkg
_tr_gr_editor=$(search_translit_pkg "${_gr_editor}" "$_user_local")
wait
_tr_office=$(search_translit_pkg "${_office}" "$_user_local")
wait


clear
info_search_pkg
_list_bash_sh=$(check_s_lst_pkg "${_bash_sh[*]}")
wait
_clist_bash_sh=$(check_q_lst_pkg "${_bash_sh[*]}")
wait
clear







sed -i '/^[a-z]/s/^/#/g' ${MOUNTPOINT}/etc/locale.gen

sed -i '/^[a-z]/s/^/#/g' /etc/locale.gen




user_list=$(ls ${MOUNTPOINT}/home/ | sed "s/lost+found//")
for i in ${user_list[@]}; do
	if [[ -n ${MOUNTPOINT}/home/$i/.xinitrc ]]; then
		cp -f ${MOUNTPOINT}/etc/X11/xinit/xinitrc ${MOUNTPOINT}/home/$i/.xinitrc
	fi
	if [[ -n ${MOUNTPOINT}/home/$i/xinitrc ]]; then
		cp -f ${MOUNTPOINT}/etc/X11/xinit/xinitrc ${MOUNTPOINT}/home/$i/
	fi
	arch_chroot "chown -R ${i}:users /home/${i}"
done  



$XDG_CURRENT_DESKTOP
$DESKTOP_SESSION

exec mate-session
# exec startxfce4
# exec cinnamon-session



# /etc/nanorc
include "/usr/share/nano/*.nanorc"

sed -i 's/\# include \"\/usr\/share\/nano\/\*.nanorc\"/include \"\/usr\/share\/nano\/\*.nanorc\"/' /etc/nanorc

sed -i 's/\# include \"\/usr\/share\/nano\/\*.nanorc\"/include \"\/usr\/share\/nano\/\*.nanorc\"/' ${MOUNTPOINT}/etc/nanorc 2>>/tmp/.errlog





xboxdrv —mimic-xpad —type xbox360
Citra, Yuzu и Dolphin-emu


rainlendar-lite
recordmydesktop
gtk-recordmydesktop


persistent persistent-path=/boot/




_ConfPass_ssh_ttl="Настройка парольной фразы ssh"
_ConfPass_ssh_bd="\nВведите, пожалуйста, парольную фразу для ssh соединения.\n"
_ConfPass_ssh_bd2="\nПовторите, пожалуйста, парольную фразу для ssh соединения.\n"
_Pass_Error_bd="\nОшибка! Введеные парольные фразы для ssh соединения не совпадают!\n"

menu_conf_ssh()
{
	dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title "$_ConfPass_ssh_ttl" --clear --insecure --passwordbox "$_ConfPass_ssh_bd" 0 0 2> ${ANSWER}
	PASSWD=$(cat ${ANSWER}) 

	dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title "$_ConfPass_ssh_ttl" --clear --insecure --passwordbox "$_ConfPass_ssh_bd2" 0 0 2> ${ANSWER}
	PASSWD2=$(cat ${ANSWER}) 

	while [[ $PASSWD != $PASSWD2 ]]; do
		dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title "$_ErrTitle" --msgbox "$_Pass_Error_bd" 0 0
				  
		dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title "$_ConfPass_ssh_ttl" --clear --insecure --passwordbox "$_ConfPass_ssh_bd" 0 0 2> ${ANSWER}
		PASSWD=$(cat ${ANSWER}) 
		
		dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title "$_ConfPass_ssh_ttl" --clear --insecure --passwordbox "$_ConfPass_ssh_bd2" 0 0 2> ${ANSWER}
		PASSWD2=$(cat ${ANSWER}) 
	done
	arch_chroot "ssh-keygen -t rsa -N '${PASSWD}' -f ~/.ssh/id_rsa" >/dev/null 2>/tmp/.errlog

	check_for_error 
}	

_Mirror_Conf_ttl="Фильтрация списка зеркал по протоколам"
_Mirror_Conf_bd="\nБудет сгенерирован список зеркал для выбранного протокола.\nВы можете решить, использовать его или нет.\n"
	
_mirror_conf_str=""
mirror_config() {
   dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title "_Mirror_Conf_ttl" \
   --checklist "_Mirror_Conf_bd" 0 0 5 \
 	"1" "http" "on" \
	"2" "https" "on" \
	"3" "IPv4" "on" \
   "4" "IPv6" "on" \
   "5" "Use Mirror status" "on" 2>${ANSWER}
   clear
   [ -f ./tmp.log ] && rm -rf ./tmp.log
   cat ${ANSWER} | sed 's/[ \t]*/\n/g' | awk '!/^$/{print $0}' | sed s/[^0-9]//g >> ./tmp.log
   var=""
   while read line; do
        var="${var} $line"
   done < ./tmp.log
   [ -f ./tmp.log ] && rm -rf ./tmp.log
   arr=( $var )
   unset var
   for i in ${arr[*]}; do
        case $i in
            "1") _mirror_conf_str="${_mirror_conf_str}&protocol=http"
                ;;
            "2") _mirror_conf_str="${_mirror_conf_str}&protocol=https"
                ;;
            "3") _mirror_conf_str="${_mirror_conf_str}&ip_version=4"
                ;;
            "4") _mirror_conf_str="${_mirror_conf_str}&ip_version=6"
                ;;
            "5") _mirror_conf_str="${_mirror_conf_str}&use_mirror_status=on"
                ;;    
        esac        
   done
   unset arr
}
mirror_config
echo "${_mirror_conf_str}"




awk '!/^$/{print $0}'
echo "awk '!/^\$/{print \$0}'" | xclip

sed 's/^[ \t]*//'
echo "sed 's/^[ \t]*//'" | xclip


sed -n '/Intel/{s/.*Intel/Intel/;s/ .*$//;p}'
sed 's/.*\(Intel\S*\).*/\1/'
awk '/Intel/' RS=" "
grep -oi "intel"


# Del finish slesh-n
awk 'NR>1{printf "\n"} {printf $0}'

# Register
$ echo "$a" | tr '[:upper:]' '[:lower:]'
echo "tr '[:upper:]' '[:lower:]'" | xclip
hi all
$ echo "$a" | awk '{print tolower($0)}'
hi all



# Zamena
sed -i "s/\\${_config1[0]}.*/${_config1[0]}=$_zamena/" $_file_cfg




# sed
# диапазон строк
$ sed '2,3s/test/another test/' myfile
$ sed '2,$s/test/another test/' myfile
# шаблон
$ sed '/likegeeks/s/bash/csh/' /etc/passwd
# Удаление
$ sed '3d' myfile
$ sed '2,3d' myfile
$ sed '3,$d' myfile
$ sed '/test/d' myfile
$ sed '/second/,/fourth/d' myfile
# Вставка
# Команда i добавляет новую строку перед заданной.
# Команда a добавляет новую строку после заданной.
$ echo "Another test" | sed 'i\First test '
$ sed '2i\This is the inserted line.' myfile
$ sed '2a\This is the appended line.' myfile
# Замена
$ sed '3c\This is a modified line.' myfile
$ sed '/This is/c This is a changed line of text.' myfile



# Array
${arr[*]} # Все записи в массиве
${!arr[*]}# Все индексы в массиве
${#arr[*]}# Количество записей в массиве
${#arr[0]}# Длина первой записи (нумерация с нуля)



